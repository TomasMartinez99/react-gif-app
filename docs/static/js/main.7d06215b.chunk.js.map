{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAyCeA,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAoBvC,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,UAAU,WACVC,KAAK,OACLC,MAAOV,EACPW,YAAY,kBACZC,SAtBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOH,a,+BCPlBI,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGAA,EAAKC,OAHL,cAGbC,EAHa,OAMbC,EAAOD,EAAKA,KAAKE,KAAK,SAAAC,GACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,2CAAH,sDCWLO,MAXf,YAA0C,IAAnBJ,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAG9B,OAFAc,QAAQC,IAAIN,EAAIC,EAAOV,GAGnB,sBAAKT,UAAU,6CAAf,UACI,qBAAKyB,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCoBDQ,EAxBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EAEZhB,mBAAS,CAC/BuB,KAAM,GACNc,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA0BtC,OApBAP,QAAQC,IAAIlB,GAEZyB,qBAAW,WAEPzB,EAAQC,GACHyB,MAAK,SAAAC,GAEFC,YAAW,WAEPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAGd,UAIZ,CAACrB,IAEGsB,EDvByBM,CAAa5B,GAAjCa,EAFkB,EAEvBN,KAAac,EAFU,EAEVA,QAEpB,OACI,qCACI,mCAAMrB,EAAN,OAECqB,GAAW,4CAEZ,qBAAK5B,UAAU,YAAf,SAEQoB,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEetBkB,EA7BM,WAAO,IAAD,EACa7C,mBAAU,CAAC,iBADxB,mBAChB8C,EADgB,KACJ/C,EADI,KAQvB,OACI,gCACI,oBAAIU,UAAU,SAAd,8BACA,cAAC,EAAD,CAAaV,cAAeA,IAC5B,iEAEA,6BAEQ+C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MChBjC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7d06215b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    // Seteamos el valor ingresado en tiempo real por input\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // Recibimos el valor enviado por input\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Condicion para saber si viene el input vacío\r\n        if (inputValue.trim().length > 1) {\r\n            setCategories( cats => [ inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                className=\"buscador\"\r\n                type=\"text\"\r\n                value={inputValue}\r\n                placeholder=\"Buscá tu Gif\"\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\n// Requerimos obligatoriamente setCategories por props\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=4&api_key=92Z04aDAwsPKOPtwpo2Qo1LJ62OFvUS7`;\r\n    const resp = await fetch(url);\r\n    const data = await resp.json();\r\n\r\n    // Recorremos y obtenemos atributos puntuales del gif\r\n    const gifs = data.data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nfunction GifGridItem( {id, title, url} ) {\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ( {category} ) => {\r\n    \r\n    const {data:images, loading}  = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n\r\n            {loading && <p>Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }   \r\n            </div>\r\n        </>\r\n    );\r\n}; \r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    console.log(getGifs);\r\n\r\n    useEffect( () => {\r\n        // Método importado \r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n            \r\n                }, 1000);\r\n\r\n            })\r\n\r\n    }, [category]);\r\n\r\n    return state; // {data:[], loading: true};\r\n\r\n}","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState( ['Boca Juniors'] );\r\n\r\n    /* const handleAdd = () => { */\r\n        /* setCategories( cats => [...cats, 'Los vengadores'] ); */\r\n        /* setCategories( [...categories, 'Los vengadores'] );\r\n    } */\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"titulo\">Buscador de Gifs</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <p>Resultados de tú búsqueda:</p>\r\n\r\n            <ul>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}